#!/usr/bin/env node
var app = require('../app');
const https = require('https');
const fs = require('fs');
const http = require(('http'))
const { WebSocketServer } = require("ws");

const privateKey = fs.readFileSync('../env/private-key.pem', 'utf8');
const certificate = fs.readFileSync('../env/server.crt', 'utf8');
const passphrase = 'omeetly';

const credentials = { key: privateKey, cert: certificate, passphrase: passphrase };

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const s = http.createServer(app);

s.listen(port, () => {
  console.log(`Server running on https://localhost:${port}`);
});

const wss = new WebSocketServer({server:s});

s.on('upgrade', (request, socket, head) => {
  console.log('Handling WebSocket upgrade request...');
  wss.handleUpgrade(request, socket, head, (ws) => {
    wss.emit('connection', ws, request);
  });
});

// Log WebSocket connection attempts
wss.on('connection', (ws) => {
  console.log('New WebSocket client connected');

  const clientId = Date.now();
  clients.set(clientId, ws);

  ws.on('message', (message) => {
    console.log('Received message:', message);
    const data = JSON.parse(message);

    // Broadcast message to all other connected clients
    wss.clients.forEach((client, id) => {
      if (id !== clientId && client.readyState === WebSocket.OPEN) {
        client.send(JSON.stringify(data));
      }
    });
  });

  ws.on('close', () => {
    console.log('WebSocket client disconnected');
    clients.delete(clientId);
  });

  // Log any errors
  ws.on('error', (err) => {
    console.log('WebSocket Error:', err);
  });
});


// Function to normalize port
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // Named pipe
    return val;
  }

  if (port >= 0) {
    // Port number
    return port;
  }

  return false;
}
